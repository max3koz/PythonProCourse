Як можна інтегрувати асинхронний код у вже існуючий синхронний проект на Python?
================================================================================

Інтеграція асинхронного коду в синхронний Python-проєкт може покращити/покращує
продуктивність при роботі з мережею, файлами або базами даних.

Можливі варіанти реалізації інтеграції:

1. Використання asyncio.run() у точках входу
---------------------------------------------
Обгорнення асинхронного коду основній функції за допомогою asyncio.run().
Підходить для CLI-утиліт, скриптів, мікросервісів.

Наприклад:
import asyncio

def main():
    asyncio.run(async_part())

async def async_part():
    await some_async_function()

2. Запуск асинхронного коду в окремому потоці
---------------------------------------------
Якщо синхронний код вже працює, а потрібно запустити async def-функцію
з використанням loop.run_in_executor() або threading.
Підходить для GUI, серверів, або фреймворків, які не підтримують asyncio.

Наприклад:
import asyncio
import threading

def run_async_in_thread():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(some_async_function())

threading.Thread(target=run_async_in_thread).start()

3. Інтеграція через nest_asyncio
--------------------------------
Якщо ти працюєш у середовищі, де вже є event loop (наприклад, Jupyter Notebook),
але asyncio.run() викликає помилку.
Підходить для інтерактивних середовищ.

python
import nest_asyncio
nest_asyncio.apply()


4. Асинхронні обгортки для синхронних API
-----------------------------------------
Заміна синхронних бібліотек на асінхронні:

Синхронна бібліотека	Асинхронна альтернатива
requests	            aiohttp
sqlite3	                aiosqlite
psycopg2	            asyncpg
paramiko	            asyncssh
